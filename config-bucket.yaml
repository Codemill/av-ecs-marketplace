AWSTemplateFormatVersion: 2010-09-09
Description: Configuration bucket with notification event on configuration file changes. 
             Custom lambda will create initial settings.js file.

Parameters:
  ApplicationTag:
    Type: String
    Default: accurate-video
    Description: Used to tag all resources

Resources:
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: frontend
            Topic: !Ref FrontendSettingsUpdatedTopic
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
      VersioningConfiguration:
        Status: Enabled

  FrontendSettingsUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  FrontendSettingsUpdatedTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              - !Ref FrontendSettingsUpdatedTopic
            Action: sns:Publish
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
      Topics:
        - !Ref FrontendSettingsUpdatedTopic

  CustomLambda:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();

          exports.handler = function(event, context, callback) {
            var params = {
              Bucket: process.env.BUCKET_NAME, 
              Key: 'settings.js',
              Body: 'json content'
            };
            s3.putObject(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);           // successful response
            });
          };
      Environment:
        Variables:
          BUCKET_NAME: !Ref ConfigBucket
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource: !Sub ${ConfigBucket.Arn}/*
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

Outputs:
  ConfigBucketName:
    Description: The name of the AV Config Bucket
    Value: !Ref ConfigBucket
  FrontendSettingsUpdatedTopicArn:
    Description: The SNS topic notified when frontend configuration files have changed
    Value: !Ref FrontendSettingsUpdatedTopic