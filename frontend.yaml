AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  ImageRepoName:
    Type: String
    Default: codemill-docker.jfrog.io/accurate-player/accurate-player-qc
    Description: The repo and tag to use for image deployment
  ImageTag:
    Type: String
    Default: 4.3.2
    Description: The ecr repo and tag to use for image deployment
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  ApplicationTag:
    Type: String
    Default: "accurate-video"
  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID"
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "Private Subnets"
  PublicLoadbalancerListenerArn:
    Type: String
    Description: "Public Loadbalancer Listener Arn"
  FrontendSettingsUpdatedTopicArn:
    Type: String
    Description: "Frontend Settings-updated Topic Arn"
  ConfigBucketName:
    Type: String
    Description: "S3 Config bucket name"
  LogGroupName:
    Type: String
    Description: "CloudWatch Log Group Name"
  FrontendSG:
    Type: AWS::EC2::SecurityGroup::GroupName
    Description: "Frontend Security Group"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Service configuration"
        Parameters:
          - ContainerCpu
          - ContainerMemory
          - DesiredCount
          - Vpc
          - PrivateSubnets
          - PublicLoadbalancerListenerArn
          - FrontendSettingsUpdatedTopicArn
          - ConfigBucketName
          - LogGroupName
          - FrontendSG
      - Label:
          default: "Image configuration"
        Parameters:
          - ImageRepoName
          - ImageTag
      - Label:
          default: "Other"
        Parameters:
          - ApplicationTag

# The task definition. This is a simple metadata description of what
# container to run, and what resource requirements it has.
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: av-frontend
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: av-frontend
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          Image: !Sub ${ImageRepoName}:${ImageTag}
          Command:
            - !Sub |
                apk add aws-cli; \
                aws s3 cp s3://${ConfigBucketName}/frontend/settings.js /usr/share/nginx/html/assets/json/settings.js; \
                aws s3 cp s3://${ConfigBucketName}/frontend/keycloak.json /usr/share/nginx/html/assets/json/keycloak.json; \
                nginx -g 'daemon off;';
          EntryPoint:
            - "sh"
            - "-c"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: av-frontend
          PortMappings:
            - ContainerPort: 80
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${ConfigBucketName}/*
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      Cluster: accurate-video
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DeploymentController:
        Type: ECS
      DesiredCount: !Ref "DesiredCount"
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: av-frontend
          ContainerPort: 80
          TargetGroupArn: !Ref "TargetGroup"
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref FrontendSG
          Subnets: !Ref PrivateSubnets
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
      TaskDefinition: !Ref "TaskDefinition"

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      Name: av-frontend
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn: !Ref PublicLoadbalancerListenerArn
      Priority: 3

  UpdateServiceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ecs = new AWS.ECS();
          exports.handler = function(event, context, callback) {
            var params = {
              service: process.env.SERVICE_NAME,
              cluster: process.env.CLUSTER_NAME,
              forceNewDeployment: true
            };
            ecs.updateService(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);           // successful response
            });
          };
      Environment:
        Variables:
          CLUSTER_NAME: accurate-video
          SERVICE_NAME: !Ref Service
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ConfigSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt UpdateServiceLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref FrontendSettingsUpdatedTopicArn

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateServiceLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref FrontendSettingsUpdatedTopicArn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/accurate-video/${Service.Name}
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
