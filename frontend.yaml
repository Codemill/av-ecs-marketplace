AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.

Parameters:
  ApplicationTag:
    Type: String
    Description: Used to tag all resources
  ConfigBucketName:
    Type: String
    Description: S3 Config bucket name
  ContainerCpu:
    Type: Number
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Description: How many copies of the service task to run
  FrontendSettingsUpdatedTopicArn:
    Type: String
    Description: Frontend Settings-updated Topic Arn
  FrontendSG:
    Type: String
    Description: Frontend Security Group
  ImageRepoName:
    Type: String
    Description: The repo and tag to use for image deployment
  ImageTag:
    Type: String
    Description: The ecr repo and tag to use for image deployment
  LogGroupName:
    Type: String
    Description: CloudWatch Log Group Name
  PrivateSubnets:
    Type: String
    Description: Private Subnets
  PublicLoadbalancerListenerArn:
    Type: String
    Description: Public Loadbalancer Listener Arn
  Vpc:
    Type: String
    Description: VPC ID

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: av-frontend
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: av-frontend
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          Image: !Sub ${ImageRepoName}:${ImageTag}
          Command:
            - !Sub |
                apk add aws-cli; \
                aws s3 cp s3://${ConfigBucketName}/frontend/settings.js /usr/share/nginx/html/assets/json/settings.js; \
                aws s3 cp s3://${ConfigBucketName}/frontend/keycloak.json /usr/share/nginx/html/assets/json/keycloak.json; \
                nginx -g 'daemon off;';
          EntryPoint:
            - "sh"
            - "-c"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: av-frontend
          PortMappings:
            - ContainerPort: 80
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${ConfigBucketName}/*
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      Cluster: accurate-video
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DeploymentController:
        Type: ECS
      DesiredCount: !Ref "DesiredCount"
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: av-frontend
          ContainerPort: 80
          TargetGroupArn: !Ref "TargetGroup"
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref FrontendSG
          Subnets: !Split [ ',', !Ref PrivateSubnets ]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
      TaskDefinition: !Ref "TaskDefinition"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      Name: av-frontend
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn: !Ref PublicLoadbalancerListenerArn
      Priority: 3

  UpdateServiceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ecs = new AWS.ECS();
          exports.handler = function(event, context, callback) {
            var params = {
              service: process.env.SERVICE_NAME,
              cluster: process.env.CLUSTER_NAME,
              forceNewDeployment: true
            };
            ecs.updateService(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);           // successful response
            });
          };
      Environment:
        Variables:
          CLUSTER_NAME: accurate-video
          SERVICE_NAME: !Ref Service
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ConfigSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt UpdateServiceLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref FrontendSettingsUpdatedTopicArn

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateServiceLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref FrontendSettingsUpdatedTopicArn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/accurate-video/${Service.Name}
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
