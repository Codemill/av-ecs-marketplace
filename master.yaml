AWSTemplateFormatVersion: 2010-09-09
Description: >
  Master template which will deploy infrastructure and services as nested stacks.

Parameters:
  AdapterRdsDbAllocatedStorage:
    Type: String
    Default: "5"
    Description: Size of the database in GB
  AdapterRdsDbClass:
    Type: String
    Default: db.t3.small
    AllowedValues:
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.m5.large
    Description: The RDS Database class to use
  ApplicationTag:
    Type: String
    Default: accurate-video
    Description: Used to tag all resources
  CertificateArn:
    Type: String
    Description: SSL certificate ARN in CertificateManager which covers the domain name used for the load balancer
  CreateVpc:
    Type: String
    Description: Should a VPC be created for you?
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  CreateVpcCidr:
    Type: String
    Description: Should a VPC be created for you?
  CreateVpcUseThreeAz:
    Type: String
    Description: Should a VPC be created for you?
    Default: ""
    AllowedValues:
      - ""
      - "true"
      - "false"
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 Hosted Zone Id
  KeycloakRdsDbAllocatedStorage:
    Type: String
    Default: "5"
    Description: Size of the database in GB
  KeycloakRdsDbClass:
    Type: String
    Default: db.t3.small
    AllowedValues:
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.m5.large
    Description: The RDS Database class to use
  LoadBalancerDomainName:
    Type: String
    Description: Domain name that will be given to the load balancer (e.g. av.example.com)
  LogsRetention:
    Type: Number
    Default: 14
    Description: Number of days that application logs are saved
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The Private Subnets which the ECS Services and RDS Database will be deployed in
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The Public Subnets which the Application Load Balancer will be deployed in
  TemplatesS3Bucket:
    Type: String
    Description: The S3 bucket containing the CloudFormation templates
    Default: https://s3-eu-north-1.amazonaws.com/av-marketplace-cloudformation
  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: The VPC which AccurateVideo will be deployed in

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network (Modify these parameters if you want a VPC to be created for you)
        Parameters:
          - CreateVpc
          - CreateVpcUseThreeAz
          - CreateVpcCidr
      - Label:
          default: Network (Modify these parameters if you want to use an existing VPC)
        Parameters:
          - Vpc
          - PrivateSubnets
          - PublicSubnets
      - Label:
          default: Database
        Parameters:
          - AdapterRdsDbAllocatedStorage
          - AdapterRdsDbClass
          - KeycloakRdsDbAllocatedStorage
          - KeycloakRdsDbClass
      - Label:
          default: DNS
        Parameters:
          - CertificateArn
          - HostedZoneId
          - LoadBalancerDomainName
      - Label:
          default: Other configuration
        Parameters:
          - ApplicationTag
          - LogsRetention
          - TemplatesS3Bucket

    ParameterLabels:
      AdapterRdsDbAllocatedStorage:
        default: Adapter Database Allocated Storage
      AdapterRdsDbClass:
        default: Adapter Database Class
      ApplicationTag:
        default: Application Tag
      CertificateArn:
        default: Certificate ARN
      CreateVpc:
        default: Create new VPC
      CreateVpcCidr:
        default: VPC CIDR
      CreateVpcUseThreeAz:
        default: VPC should have 3 Availability Zones
      HostedZoneId:
        default: HostedZone ID
      KeycloakRdsDbAllocatedStorage:
        default: Keycloak Database Allocated Storage
      KeycloakRdsDbClass:
        default: Keycloak Database Class
      LoadBalancerDomainName:
        default: Load Balancer Domain Name
      LogsRetention:
        default: Application Logs Retention
      PrivateSubnets:
        default: Private Subnets
      PublicSubnets:
        default: Public Subnets
      TemplatesS3Bucket:
        default: CloudFormation Templates S3 Bucket
      Vpc:
        default: VPC ID

Mappings:
  Service:
    Adapter:
      ContainerCpu: 256
      ContainerMemory: 1024
      DesiredCount: 1
      ImageRepoName: 107410575319.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-adapter
      ImageTag: marketplacetest-3
    Analyze:
      ApAnalyzeCacheDays: "5"
      ApAnalyzeCacheDir: "/tmp/wav"
      ContainerCpu: 256
      ContainerMemory: 512
      DesiredCount: 1
      ImageRepoName: 107410575319.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-analyze
      ImageTag: marketplacetest-3
      QuarkusHttpCors: "true"
    Jobs:
      AwsRole: ""
      BlackFrameDenominator: "1"
      BlackFrameDuration: "1200"
      BlackFrameLocation: "s3://av-black-frame-codemill/black25.mp4"
      BlackFrameNumerator: "25"
      ContainerCpu: 512
      ContainerMemory: 1024
      DesiredCount: 1
      ImageRepoName: 107410575319.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-jobs
      ImageTag: marketplacetest-3
    Frontend:
      ContainerCpu: 256
      ContainerMemory: 512
      DesiredCount: 1
      ImageRepoName: 107410575319.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-frontend
      ImageTag: marketplacetest-3
    Keycloak:
      ContainerCpu: 256
      ContainerMemory: 512
      DesiredCount: 1
      ImageRepoName: 107410575319.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-keycloak
      ImageTag: marketplacetest-3

Conditions:
  CreateVpc: !Equals [!Ref CreateVpc, "true"]

Resources:
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateVpc
    Properties:
      Parameters:
        ApplicationTag: !Ref ApplicationTag
        VpcCidr: !Ref CreateVpcCidr
        UseThreeAz: !Ref CreateVpcUseThreeAz
      TemplateURL: !Sub ${TemplatesS3Bucket}/vpc.yaml
      TimeoutInMinutes: 30

  InfrastructureStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApplicationTag: !Ref ApplicationTag
        CertificateArn: !Ref CertificateArn
        HostedZoneId: !Ref HostedZoneId
        LoadBalancerDomainName: !Sub ${LoadBalancerDomainName}.
        LogsRetention: !Ref LogsRetention
        PublicSubnets: !If [CreateVpc, !GetAtt VpcStack.Outputs.PublicSubnets, !Join [",", !Ref PublicSubnets]]
        Vpc: !If [CreateVpc, !GetAtt VpcStack.Outputs.Vpc, !Ref Vpc]
      TemplateURL: !Sub ${TemplatesS3Bucket}/infrastructure.yaml
      TimeoutInMinutes: 30

  AdapterStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AdapterSG: !GetAtt InfrastructureStack.Outputs.AdapterSecurityGroup
        ApplicationTag: !Ref ApplicationTag
        ContainerCpu: !FindInMap [Service, Adapter, ContainerCpu]
        ContainerMemory: !FindInMap [Service, Adapter, ContainerMemory]
        DesiredCount: !FindInMap [Service, Adapter, DesiredCount]
        ImageRepoName: !FindInMap [Service, Adapter, ImageRepoName]
        ImageTag: !FindInMap [Service, Adapter, ImageTag]
        LogGroupName: !GetAtt InfrastructureStack.Outputs.LogGroup
        PrivateDNSNamespace: !GetAtt InfrastructureStack.Outputs.PrivateDnsNamespace
        PrivateSubnets:  !If [CreateVpc, !GetAtt VpcStack.Outputs.PrivateSubnets, !Join [",", !Ref PrivateSubnets]]
        PublicLoadbalancerListenerArn: !GetAtt InfrastructureStack.Outputs.PublicListener
        RdsDbAllocatedStorage: !Ref AdapterRdsDbAllocatedStorage
        RdsDbClass: !Ref AdapterRdsDbClass
        RdsDbSecurityGroup: !GetAtt InfrastructureStack.Outputs.AdapterRdsDbSecurityGroup
        Vpc: !If [CreateVpc, !GetAtt VpcStack.Outputs.Vpc, !Ref Vpc]
        VpcCidrBlock: !GetAtt GetVpcCidrLambdaStack.Outputs.CidrBlock
      TemplateURL: !Sub ${TemplatesS3Bucket}/adapter.yaml
      TimeoutInMinutes: 30

  FrontendStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApplicationTag: !Ref ApplicationTag
        ConfigBucketName: !GetAtt ConfigBucketStack.Outputs.ConfigBucketName
        ContainerCpu: !FindInMap [Service, Frontend, ContainerCpu]
        ContainerMemory: !FindInMap [Service, Frontend, ContainerMemory]
        DesiredCount: !FindInMap [Service, Frontend, DesiredCount]
        FrontendSettingsUpdatedTopicArn: !GetAtt ConfigBucketStack.Outputs.FrontendSettingsUpdatedTopicArn
        FrontendSG: !GetAtt InfrastructureStack.Outputs.FrontendSecurityGroup
        ImageRepoName: !FindInMap [Service, Frontend, ImageRepoName]
        ImageTag: !FindInMap [Service, Frontend, ImageTag]
        LogGroupName: !GetAtt InfrastructureStack.Outputs.LogGroup
        PrivateSubnets:  !If [CreateVpc, !GetAtt VpcStack.Outputs.PrivateSubnets, !Join [",", !Ref PrivateSubnets]]
        PublicLoadbalancerListenerArn: !GetAtt InfrastructureStack.Outputs.PublicListener
        Vpc: !If [CreateVpc, !GetAtt VpcStack.Outputs.Vpc, !Ref Vpc]
      TemplateURL: !Sub ${TemplatesS3Bucket}/frontend.yaml
      TimeoutInMinutes: 30

  AnalyzeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AnalyzeSG: !GetAtt InfrastructureStack.Outputs.AnalyzeSecurityGroup
        ApAnalyzeCacheDays: !FindInMap [Service, Analyze, ApAnalyzeCacheDays]
        ApAnalyzeCacheDir: !FindInMap [Service, Analyze, ApAnalyzeCacheDir]
        ApplicationTag: !Ref ApplicationTag
        ContainerCpu: !FindInMap [Service, Analyze, ContainerCpu]
        ContainerMemory: !FindInMap [Service, Analyze, ContainerMemory]
        DesiredCount: !FindInMap [Service, Analyze, DesiredCount]
        ImageRepoName: !FindInMap [Service, Analyze, ImageRepoName]
        ImageTag: !FindInMap [Service, Analyze, ImageTag]
        LogGroupName: !GetAtt InfrastructureStack.Outputs.LogGroup
        PrivateSubnets:  !If [CreateVpc, !GetAtt VpcStack.Outputs.PrivateSubnets, !Join [",", !Ref PrivateSubnets]]
        PublicLoadbalancerListenerArn: !GetAtt InfrastructureStack.Outputs.PublicListener
        QuarkusHttpCors: !FindInMap [Service, Analyze, QuarkusHttpCors]
        Vpc: !If [CreateVpc, !GetAtt VpcStack.Outputs.Vpc, !Ref Vpc]
      TemplateURL: !Sub ${TemplatesS3Bucket}/analyze.yaml
      TimeoutInMinutes: 30

  JobsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AdapterServiceName: !GetAtt AdapterStack.Outputs.ServiceName
        ApplicationTag: !Ref ApplicationTag
        AuthRunnerSecretArn: !GetAtt AdapterStack.Outputs.AuthRunnerSecretArn
        AwsRole: !FindInMap [Service, Jobs, AwsRole]
        BlackFrameDenominator: !FindInMap [Service, Jobs, BlackFrameDenominator]
        BlackFrameDuration: !FindInMap [Service, Jobs, BlackFrameDuration]
        BlackFrameLocation: !FindInMap [Service, Jobs, BlackFrameLocation]
        BlackFrameNumerator: !FindInMap [Service, Jobs, BlackFrameNumerator]
        ContainerCpu: !FindInMap [Service, Jobs, ContainerCpu]
        ContainerMemory: !FindInMap [Service, Jobs, ContainerMemory]
        DesiredCount: !FindInMap [Service, Jobs, DesiredCount]
        ImageRepoName: !FindInMap [Service, Jobs, ImageRepoName]
        ImageTag: !FindInMap [Service, Jobs, ImageTag]
        JobsSG: !GetAtt InfrastructureStack.Outputs.JobsSecurityGroup
        LogGroupName: !GetAtt InfrastructureStack.Outputs.LogGroup
        PrivateDNSNamespace: !GetAtt InfrastructureStack.Outputs.PrivateDnsNamespace
        PrivateSubnets:  !If [CreateVpc, !GetAtt VpcStack.Outputs.PrivateSubnets, !Join [",", !Ref PrivateSubnets]]
        VpcCidrBlock: !GetAtt GetVpcCidrLambdaStack.Outputs.CidrBlock
      TemplateURL: !Sub ${TemplatesS3Bucket}/jobs.yaml
      TimeoutInMinutes: 30

  KeycloakStack: #TODO: Check that all parameters actually exist
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApplicationTag: !Ref ApplicationTag
        ContainerCpu: !FindInMap [Service, Keycloak, ContainerCpu]
        ContainerMemory: !FindInMap [Service, Keycloak, ContainerMemory]
        DesiredCount: !FindInMap [Service, Keycloak, DesiredCount]
        FrontendUrl: !Sub https://${LoadBalancerDomainName}/
        ImageRepoName: !FindInMap [Service, Keycloak, ImageRepoName]
        ImageTag: !FindInMap [Service, Keycloak, ImageTag]
        KeycloakSG: !GetAtt InfrastructureStack.Outputs.KeycloakSecurityGroup
        LogGroupName: !GetAtt InfrastructureStack.Outputs.LogGroup
        PrivateSubnets:  !If [CreateVpc, !GetAtt VpcStack.Outputs.PrivateSubnets, !Join [",", !Ref PrivateSubnets]]
        PublicLoadbalancerListenerArn: !GetAtt InfrastructureStack.Outputs.PublicListener
        RdsDbAllocatedStorage: !Ref KeycloakRdsDbAllocatedStorage
        RdsDbClass: !Ref KeycloakRdsDbClass
        RdsDbSecurityGroup: !GetAtt InfrastructureStack.Outputs.KeycloakRdsDbSecurityGroup
        Vpc: !If [CreateVpc, !GetAtt VpcStack.Outputs.Vpc, !Ref Vpc]
      TemplateURL: !Sub ${TemplatesS3Bucket}/keycloak.yaml
      TimeoutInMinutes: 30

  ConfigBucketStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApplicationTag: !Ref ApplicationTag
      TemplateURL: !Sub ${TemplatesS3Bucket}/config-bucket.yaml
      TimeoutInMinutes: 30

  GetVpcCidrLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApplicationTag: !Ref ApplicationTag
        Vpc: !If [CreateVpc, !GetAtt VpcStack.Outputs.Vpc, !Ref Vpc]
      TemplateURL: !Sub ${TemplatesS3Bucket}/get-vpc-cidr-lambda.yaml
      TimeoutInMinutes: 30
