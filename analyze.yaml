AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.

Parameters:
  AnalyzeSG:
    Type: String
    Description: Analyze Security Group
  ApAnalyzeCacheDays:
    Type: String
    Description: Number of days
  ApAnalyzeCacheDir:
    Type: String
    Description: ""
  ApplicationTag:
    Type: String
    Description: Used to tag all resources  
  ContainerCpu:
    Type: Number
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Description: How many copies of the service task to run
  ImageRepoName:
    Type: String
    Description: The ecr repo and tag to use for image deployment
  ImageTag:
    Type: String
    Description: The ecr repo and tag to use for image deployment
  LogGroupName:
    Type: String
    Description: CloudWatch Log Group Name
  PrivateSubnets:
    Type: String
    Description: Private Subnets
  PublicLoadbalancerListenerArn:
    Type: String
    Description: Public Loadbalancer Listener Arn
  QuarkusHttpCors:
    Type: String
    Description: ""
  Vpc:
    Type: String
    Description: VPC ID

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: av-analyze
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: av-analyze
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Sub ${ImageRepoName}:${ImageTag}
          PortMappings:
            - ContainerPort: 8080
          Command:
            - "mkdir /tmp/wav && java -jar accurate-analyze.jar"
          EntryPoint:
            - "sh"
            - "-c"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: av-analyze
          WorkingDirectory: "/opt/"
          Environment:
            - Name: AP_ANALYZE_CACHE_DAYS
              Value: !Ref ApAnalyzeCacheDays
            - Name: AP_ANALYZE_CACHE_DIR
              Value: !Ref ApAnalyzeCacheDir
            - Name: QUARKUS_HTTP_CORS
              Value: !Ref QuarkusHttpCors
            - Name: HTTP_PATH_PREFIX
              Value: "/api"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:HeadObject
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      Cluster: accurate-video
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref AnalyzeSG
          Subnets: !Split [ ',', !Ref PrivateSubnets ]
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: av-analyze
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /api/analyze/audio/async
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      Matcher:
        HttpCode: "200,401,400"
      TargetType: ip
      Name: av-analyze
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: ["/api/analyze/*"]
      ListenerArn: !Ref PublicLoadbalancerListenerArn
      Priority: 1
