AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.

Parameters:
  AnalyzeSG:
    Type: String
    Description: Analyze Security Group
  ApplicationTag:
    Type: String
    Description: Used to tag all resources  
  ContainerCpu:
    Type: Number
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Description: How many copies of the service task to run
  ImageRepoName:
    Type: String
    Description: The ecr repo and tag to use for image deployment
  ImageTag:
    Type: String
    Description: The ecr repo and tag to use for image deployment
  LoadbalancerListenerPath:
    Type: String
    Description: Loadbalancer Listener Rule Path
  LoadbalancerListenerPriority:
    Type: String
    Description: Loadbalancer Listener Rule Priority
  LogGroupName:
    Type: String
    Description: CloudWatch Log Group Name
  PrivateSubnets:
    Type: String
    Description: Private Subnets
  PublicLoadbalancerListenerArn:
    Type: String
    Description: Public Loadbalancer Listener Arn
  Vpc:
    Type: String
    Description: VPC ID

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: av-analyze
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: av-analyze
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Sub ${ImageRepoName}:${ImageTag}
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: av-analyze
          WorkingDirectory: "/opt/"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:HeadObject
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      Cluster: accurate-video
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: av-analyze
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref AnalyzeSG
          Subnets: !Split [ ',', !Ref PrivateSubnets ]
      ServiceName: analyze
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
      TaskDefinition: !Ref TaskDefinition

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      Matcher:
        HttpCode: "200,401,400"
      TargetType: ip
      Name: av-analyze
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: [!Ref LoadbalancerListenerPath]
      ListenerArn: !Ref PublicLoadbalancerListenerArn
      Priority: !Ref LoadbalancerListenerPriority
